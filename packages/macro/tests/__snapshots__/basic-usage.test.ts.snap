// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`macros 1. client-
  Imports the macro and uses it to import a single SSR computation file.
  On server side, it will be statically imported and executed.
  On client side, it will use a dynamic import to lazy load the computation.
  The computation will be loaded on the client side if one of dependencies changes.
: 1. client-
  Imports the macro and uses it to import a single SSR computation file.
  On server side, it will be statically imported and executed.
  On client side, it will use a dynamic import to lazy load the computation.
  The computation will be loaded on the client side if one of dependencies changes.
 1`] = `


import { useSSRComputation } from "../lib/index.macro"
const x = useSSRComputation("./a.ssr-computation", []);


      ↓ ↓ ↓ ↓ ↓ ↓

function _dynamicImport_() {
  return import(
    /* webpackChunkName: "default-ssr-computations" */ "./a.ssr-computation"
  );
}
import useSSRComputation_Client from "@shakacode/use-ssr-computation.runtime/lib/useSSRComputation_Client";
const x = useSSRComputation_Client(
  _dynamicImport_,
  [],
  {},
  "tests/a.ssr-computation",
);

`;

exports[`macros 1. client-custom-wepback-chunk-name: 1. client-custom-wepback-chunk-name 1`] = `


import { useSSRComputation } from "../lib/index.macro"
const x = useSSRComputation("./a.ssr-computation", [], { webpackChunkName: "custom-chunk-name" });


      ↓ ↓ ↓ ↓ ↓ ↓

function _dynamicImport_() {
  return import(
    /* webpackChunkName: "custom-chunk-name-ssr-computations" */ "./a.ssr-computation"
  );
}
import useSSRComputation_Client from "@shakacode/use-ssr-computation.runtime/lib/useSSRComputation_Client";
const x = useSSRComputation_Client(
  _dynamicImport_,
  [],
  {},
  "tests/a.ssr-computation",
);

`;

exports[`macros 1. client-multiple-imports: 1. client-multiple-imports 1`] = `


import { useSSRComputation } from "../lib/index.macro"
const x = useSSRComputation("./a.ssr-computation", [])
const y = useSSRComputation("./b.ssr-computation", [])


      ↓ ↓ ↓ ↓ ↓ ↓

function _dynamicImport_2() {
  return import(
    /* webpackChunkName: "default-ssr-computations" */ "./b.ssr-computation"
  );
}
function _dynamicImport_() {
  return import(
    /* webpackChunkName: "default-ssr-computations" */ "./a.ssr-computation"
  );
}
import useSSRComputation_Client from "@shakacode/use-ssr-computation.runtime/lib/useSSRComputation_Client";
const x = useSSRComputation_Client(
  _dynamicImport_,
  [],
  {},
  "tests/a.ssr-computation",
);
const y = useSSRComputation_Client(
  _dynamicImport_2,
  [],
  {},
  "tests/b.ssr-computation",
);

`;

exports[`macros 1. client-no usage: 1. client-no usage 1`] = `


import { useSSRComputation } from "../lib/index.macro"


      ↓ ↓ ↓ ↓ ↓ ↓



`;

exports[`macros 1. client-used-inside-react-component: 1. client-used-inside-react-component 1`] = `


import React from "react"
import { useSSRComputation } from "../lib/index.macro"

const ReactComponent = () => {
  const x = useSSRComputation("./a.ssr-computation", []);
  // To make sure that the macro generate unqiue names
  const _dynamicImport_ = null;
}


      ↓ ↓ ↓ ↓ ↓ ↓

function _dynamicImport_2() {
  return import(
    /* webpackChunkName: "default-ssr-computations" */ "./a.ssr-computation"
  );
}
import useSSRComputation_Client from "@shakacode/use-ssr-computation.runtime/lib/useSSRComputation_Client";
import React from "react";
const ReactComponent = () => {
  const x = useSSRComputation_Client(
    _dynamicImport_2,
    [],
    {},
    "tests/a.ssr-computation",
  );
  // To make sure that the macro generate unqiue names
  const _dynamicImport_ = null;
};

`;

exports[`macros 1. server-
  Imports the macro and uses it to import a single SSR computation file.
  On server side, it will be statically imported and executed.
  On client side, it will use a dynamic import to lazy load the computation.
  The computation will be loaded on the client side if one of dependencies changes.
: 1. server-
  Imports the macro and uses it to import a single SSR computation file.
  On server side, it will be statically imported and executed.
  On client side, it will use a dynamic import to lazy load the computation.
  The computation will be loaded on the client side if one of dependencies changes.
 1`] = `


import { useSSRComputation } from "../lib/index.macro"
const x = useSSRComputation("./a.ssr-computation", []);


      ↓ ↓ ↓ ↓ ↓ ↓

import * as __a from "./a.ssr-computation";
import useSSRComputation_Server from "@shakacode/use-ssr-computation.runtime/lib/useSSRComputation_Server";
const x = useSSRComputation_Server(__a, [], {}, "tests/a.ssr-computation");

`;

exports[`macros 1. server-custom-wepback-chunk-name: 1. server-custom-wepback-chunk-name 1`] = `


import { useSSRComputation } from "../lib/index.macro"
const x = useSSRComputation("./a.ssr-computation", [], { webpackChunkName: "custom-chunk-name" });


      ↓ ↓ ↓ ↓ ↓ ↓

import * as __a from "./a.ssr-computation";
import useSSRComputation_Server from "@shakacode/use-ssr-computation.runtime/lib/useSSRComputation_Server";
const x = useSSRComputation_Server(__a, [], {}, "tests/a.ssr-computation");

`;

exports[`macros 1. server-multiple-imports: 1. server-multiple-imports 1`] = `


import { useSSRComputation } from "../lib/index.macro"
const x = useSSRComputation("./a.ssr-computation", [])
const y = useSSRComputation("./b.ssr-computation", [])


      ↓ ↓ ↓ ↓ ↓ ↓

import * as __b from "./b.ssr-computation";
import * as __a from "./a.ssr-computation";
import useSSRComputation_Server from "@shakacode/use-ssr-computation.runtime/lib/useSSRComputation_Server";
const x = useSSRComputation_Server(__a, [], {}, "tests/a.ssr-computation");
const y = useSSRComputation_Server(__b, [], {}, "tests/b.ssr-computation");

`;

exports[`macros 1. server-no usage: 1. server-no usage 1`] = `


import { useSSRComputation } from "../lib/index.macro"


      ↓ ↓ ↓ ↓ ↓ ↓



`;

exports[`macros 1. server-used-inside-react-component: 1. server-used-inside-react-component 1`] = `


import React from "react"
import { useSSRComputation } from "../lib/index.macro"

const ReactComponent = () => {
  const x = useSSRComputation("./a.ssr-computation", []);
  // To make sure that the macro generate unqiue names
  const _dynamicImport_ = null;
}


      ↓ ↓ ↓ ↓ ↓ ↓

import * as __a from "./a.ssr-computation";
import useSSRComputation_Server from "@shakacode/use-ssr-computation.runtime/lib/useSSRComputation_Server";
import React from "react";
const ReactComponent = () => {
  const x = useSSRComputation_Server(__a, [], {}, "tests/a.ssr-computation");
  // To make sure that the macro generate unqiue names
  const _dynamicImport_ = null;
};

`;
